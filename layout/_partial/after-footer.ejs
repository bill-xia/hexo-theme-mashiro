<% if (config.disqus_shortname){ %>
<script>
  var disqus_shortname = '<%= config.disqus_shortname %>';
  <% if (page.permalink){ %>
  var disqus_url = '<%= page.permalink %>';
  <% } %>
  (function(){
    var dsq = document.createElement('script');
    dsq.async = true;
    dsq.src = 'https://' + disqus_shortname + '.disqus.com/<% if (page.comments) { %>embed.js<% } else { %>count.js<% } %>';
    (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
  })();
</script>
<% } %>

<script src="<%- url_for('js/clipboard.min.js') %>"></script>
<script src="<%- url_for('js/jquery-1.4.3.min.js') %>"></script>
<% if (theme.fancybox){ %>
<script src="<%- url_for('fancybox/jquery.fancybox-1.3.4.pack.js') %>"></script>
<% } %>

<script src="<%- url_for('js/script.js') %>"></script>
<%- partial('gauges-analytics') %>

<% if(theme.valine.enable && theme.valine.appId && theme.valine.appKey){ %>
  <%- js('https://cdn.jsdelivr.net/npm/valine@1.3.10/dist/Valine.min.js') %>
<script>
    var GUEST_INFO = ['nick','mail','link'];
    var guest_info = '<%= theme.valine.guest_info %>'.split(',').filter(function(item){
        return GUEST_INFO.indexOf(item) > -1
    });
    var notify = '<%= theme.valine.notify %>' == true;
    var verify = '<%= theme.valine.verify %>' == true;
    new Valine({
        el: '.vcomment',
        notify: notify,
        verify: verify,
        appId: "<%= theme.valine.appId %>",
        appKey: "<%= theme.valine.appKey %>",
        placeholder: "<%= theme.valine.placeholder %>",
        pageSize:'<%= theme.valine.pageSize %>',
        avatar:'<%= theme.valine.avatar %>',
        lang:'<%= theme.valine.lang %>'
    });
</script>
<% } %>

<% if (theme.isso && theme.isso.enable) { %>
  <script 
  <% if (theme.isso.data_isso) { %> 
    data-isso="<%= theme.isso.data_isso %>"
  <% } %>
  <% if (theme.isso.src) { %> 
    src="<%= theme.isso.src %>"
  <% } %>
  >
  </script>
<% } %>

<% if(theme.math.enable && theme.math.engine == 'mathjax'){ %>
<script>
  MathJax = {
    options: {
      enableMenu: false
    },
    tex: {
      inlineMath: [['$', '$'], ['\\(', '\\)']],
      displayMath: [['$$', '$$'], ['\\[', '\\]']],
    }
  };
</script>
<!-- <script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    tex2jax: {inlineMath: [['$','$'], ['\\(','\\)']]},
    CommonHTML: {
      linebreaks: false
    }
  });
  </script> -->
<script type="text/javascript" id="MathJax-script" async
  src="<%- url_for('mathjax/tex-chtml.js') %>">
</script>
<!-- <script type="text/javascript"
   src="https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.7/MathJax.js?config=TeX-AMS_CHTML">
</script> -->
<% } %>